/**
 * Ê™îÊ°àÈÅ∏ÊìáÂô®ÂÖÉ‰ª∂ (FileSelector)
 *
 * ÂäüËÉΩË™™ÊòéÔºö
 * - Êèê‰æõ HEIC Ê™îÊ°àÈÅ∏ÊìáÁöÑÈõôÈáçÊñπÂºèÔºöÁõ∏Á∞øÈÅ∏ÊìáÂíåÊ™îÊ°àÁ≥ªÁµ±ÈÅ∏Êìá
 * - ÊîØÊè¥Â§öÊ™îÊ°àÊâπÈáèÈÅ∏ÊìáÂíåÂç≥ÊôÇÈ†êË¶ΩÂäüËÉΩ
 * - Êï¥ÂêàÊ¨äÈôêÁÆ°ÁêÜÂíåÈåØË™§ËôïÁêÜÊ©üÂà∂
 * - ÂÖ∑ÂÇôÁ≤æÁæéÁöÑË¶ñË¶∫Ë®≠Ë®àÂíåÊµÅÊö¢ÁöÑ‰∫íÂãïÂãïÁï´
 *
 * ÈÅ∏ÊìáÊñπÂºèÔºö
 * - Áõ∏Á∞øÈÅ∏Êìá: ‰ΩøÁî® ImagePicker ÂæûÁ≥ªÁµ±Áõ∏Á∞øÈÅ∏Êìá HEIC ÁÖßÁâá
 * - Ê™îÊ°àÈÅ∏Êìá: ‰ΩøÁî® DocumentPicker ÂæûÊ™îÊ°àÁ≥ªÁµ±ÈÅ∏Êìá HEIC/HEIF Ê™îÊ°à
 * - Ëá™ÂãïÈÅéÊøæ: Á¢∫‰øùÂè™ËÉΩÈÅ∏Êìá HEIC/HEIF Ê†ºÂºèÁöÑÂúñÁâáÊ™îÊ°à
 * - ÊâπÈáèÊîØÊè¥: ÂÖ©Á®ÆÊñπÂºèÈÉΩÊîØÊè¥Â§öÊ™îÊ°àÂêåÊôÇÈÅ∏Êìá
 *
 * Ë¶ñË¶∫Ë®≠Ë®àÁâπËâ≤Ôºö
 * - Êº∏Â±§Âç°Áâá: ‰ΩøÁî® LinearGradient ÂâµÈÄ†Áèæ‰ª£ÂåñË¶ñË¶∫ÊïàÊûú
 * - Ëá™Ë®ÇÂúñÁ§∫: Á≤æÂøÉË®≠Ë®àÁöÑÁõ∏Ê©üÂíåË≥áÊñôÂ§æÂúñÁ§∫
 * - ÊåâÂ£ìÂãïÁï´: Á∏ÆÊîæÂãïÁï´Êèê‰æõÂç≥ÊôÇÁöÑËß∏Ë¶∫ÂõûÈ•ã
 * - ÁôºÂÖâÊïàÊûú: ÂúñÁ§∫Âë®ÂúçÁöÑÁôºÂÖâÈÇäÊ°ÜÂ¢ûÂº∑Ë¶ñË¶∫Ë°ùÊìä
 * - ‰∏ªÈ°åÈÅ©Êáâ: Ëá™ÂãïÈÅ©ÊáâÊòéÊöó‰∏ªÈ°åÈ°èËâ≤Á≥ªÁµ±
 *
 * Ê™îÊ°àÁÆ°ÁêÜÂäüËÉΩÔºö
 * - ÈÅ∏ÊìáÁãÄÊÖãÈ°ØÁ§∫: StatusBadge È°ØÁ§∫Â∑≤ÈÅ∏Ê™îÊ°àÊï∏Èáè
 * - Ê™îÊ°àÂàóË°®È†êË¶Ω: È°ØÁ§∫Ââç 3 ÂÄãÊ™îÊ°àÁöÑË©≥Á¥∞Ë≥áË®ä
 * - Ê™îÊ°àÂ§ßÂ∞èÊ†ºÂºèÂåñ: B/KB/MB Ëá™ÂãïËΩâÊèõÈ°ØÁ§∫
 * - Ê∏ÖÈô§ÂäüËÉΩ: ‰∏ÄÈçµÊ∏ÖÈô§ÊâÄÊúâÂ∑≤ÈÅ∏Ê™îÊ°à
 * - Ê†ºÂºèÈ©óË≠â: Á¢∫‰øùÈÅ∏ÊìáÁöÑÊ™îÊ°àÁ¨¶Âêà HEIC/HEIF Ê†ºÂºè
 *
 * Ê¨äÈôêËàáÈåØË™§ËôïÁêÜÔºö
 * - Áõ∏Á∞øÊ¨äÈôêÊ™¢Êü•: Ëá™ÂãïË´ãÊ±ÇÂíåÈ©óË≠âÁõ∏Á∞øÂ≠òÂèñÊ¨äÈôê
 * - Ê†ºÂºèÈ©óË≠â: Ê™¢Êü•Ê™îÊ°àÂâØÊ™îÂêçÂíå MIME È°ûÂûã
 * - ÂèãÂñÑÈåØË™§ÊèêÁ§∫: Ê∏ÖÊ•öÁöÑÈåØË™§Ë®äÊÅØÂíåËß£Ê±∫Âª∫Ë≠∞
 * - Áï∞Â∏∏ÊçïÁç≤: ÂÆåÊï¥ÁöÑ try-catch ÈåØË™§ËôïÁêÜÊ©üÂà∂
 *
 * ÂãïÁï´Ëàá‰∫íÂãïÔºö
 * - ÊåâÂ£ìÁ∏ÆÊîæÂãïÁï´: 0.95 ÂÄçÁ∏ÆÊîæÊèê‰æõËß∏Ë¶∫ÂõûÈ•ã
 * - ÂúñÁ§∫ÁôºÂÖâÊïàÊûú: opacity Âíå shadow ÁµêÂêàÁöÑË¶ñË¶∫ÊïàÊûú
 * - Á¶ÅÁî®ÁãÄÊÖãËôïÁêÜ: ËΩâÊèõÈÄ≤Ë°å‰∏≠ÁöÑË¶ñË¶∫Á¶ÅÁî®ÊïàÊûú
 * - Êá∏ÂÅúÁãÄÊÖãÁÆ°ÁêÜ: ÊîØÊè¥ Web Âπ≥Âè∞ÁöÑÊá∏ÂÅúÊïàÊûú
 *
 * Props Ë™™ÊòéÔºö
 * - selectedFiles: Áï∂ÂâçÂ∑≤ÈÅ∏ÊìáÁöÑÊ™îÊ°àÈô£Âàó
 * - onFilesSelected: Ê™îÊ°àÈÅ∏ÊìáÂÆåÊàêÁöÑÂõûË™øÂáΩÊï∏
 * - onClearFiles: Ê∏ÖÈô§Ê™îÊ°àÁöÑÂõûË™øÂáΩÊï∏
 * - disabled: ÊòØÂê¶Á¶ÅÁî®Ê™îÊ°àÈÅ∏ÊìáÂäüËÉΩ
 * - showPhotoOption: ÊòØÂê¶È°ØÁ§∫Áõ∏Á∞øÈÅ∏ÊìáÈÅ∏È†Ö
 *
 * ÊäÄË°ìÂØ¶‰Ωú‰∫ÆÈªûÔºö
 * - Áµ±‰∏ÄÊ™îÊ°àÊ†ºÂºè: Â∞á‰∏çÂêå‰æÜÊ∫êÁöÑÊ™îÊ°àËΩâÊèõÁÇ∫Áµ±‰∏ÄÁöÑË≥áÊñôÁµêÊßã
 * - ÊïàËÉΩÊúÄ‰Ω≥Âåñ: ÂÉÖÈ°ØÁ§∫Ââç 3 ÂÄãÊ™îÊ°àÈÅøÂÖçÈï∑ÂàóË°®ÊïàËÉΩÂïèÈ°å
 * - Ë®òÊÜ∂È´îÁÆ°ÁêÜ: ÈÅ©Áï∂ÁöÑÁãÄÊÖãÁÆ°ÁêÜÈÅøÂÖçË®òÊÜ∂È´îÊ¥©Êºè
 * - Ë∑®Âπ≥Âè∞Áõ∏ÂÆπ: ÂêåÊôÇÊîØÊè¥ÂéüÁîüÂíå Web Âπ≥Âè∞ÁöÑÊ™îÊ°àÈÅ∏Êìá
 */

import { ThemedText } from "@/components/ThemedText";
import { Button } from "@/components/ui/Button";
import { Card } from "@/components/ui/Card";
import { HEICPickerModal } from "@/components/ui/HEICPickerModal";
import { StatusBadge } from "@/components/ui/StatusBadge";
import { BorderRadius, NewColors, Shadows, Spacing, Typography } from "@/constants/NewColors";
import { useThemeColor } from "@/hooks/useThemeColor";
import * as DocumentPicker from "expo-document-picker";
import * as ImagePicker from "expo-image-picker";
import { LinearGradient } from "expo-linear-gradient";
import * as MediaLibrary from "expo-media-library";
import React, { useState } from "react";
import { Alert, Animated, StyleSheet, TouchableOpacity, View } from "react-native";

interface FileSelectorProps {
  selectedFiles: any[];
  onFilesSelected: (files: any[]) => void;
  onClearFiles: () => void;
  disabled?: boolean;
  showPhotoOption?: boolean;
}

export function FileSelector({ selectedFiles, onFilesSelected, onClearFiles, disabled = false }: FileSelectorProps) {
  const isDark = useThemeColor({}, "background") === "#151718";
  const colors = isDark ? NewColors.dark : NewColors.light;

  const [scaleAnimPhoto] = useState(new Animated.Value(1));
  const [scaleAnimFile] = useState(new Animated.Value(1));
  const [showHEICModal, setShowHEICModal] = useState(false);

  const animatePress = (scaleAnim: Animated.Value, action: () => void) => {
    Animated.sequence([
      Animated.timing(scaleAnim, {
        toValue: 0.95,
        duration: 100,
        useNativeDriver: true,
      }),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }),
    ]).start();
    action();
  };

  const handleSelectFromPhotos = async () => {
    try {
      // Ë´ãÊ±ÇÁõ∏Á∞øÊ¨äÈôê
      console.log("üîí Ë´ãÊ±ÇÁõ∏Á∞øÊ¨äÈôê...");
      const { status: imagePickerStatus } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      const { status: mediaLibraryStatus } = await MediaLibrary.requestPermissionsAsync();

      console.log("üìã Ê¨äÈôêÁãÄÊÖã:", { imagePickerStatus, mediaLibraryStatus });

      if (imagePickerStatus !== "granted" || mediaLibraryStatus !== "granted") {
        console.log("‚ùå Ê¨äÈôêË¢´ÊãíÁµï");
        Alert.alert("Ê¨äÈôê‰∏çË∂≥", "ÈúÄË¶ÅÁõ∏Á∞øÊ¨äÈôêÊâçËÉΩÈÅ∏ÊìáÁÖßÁâá");
        return;
      }

      // Áõ¥Êé•È°ØÁ§∫ HEIC ÈÅ∏ÊìáÁïåÈù¢ÔºåËÆì Modal Ëá™Â∑±ËºâÂÖ•
      console.log("üìã È°ØÁ§∫ HEIC ÈÅ∏ÊìáÁïåÈù¢");
      setShowHEICModal(true);
    } catch (error) {
      console.error("‚ùå ÈÅ∏ÊìáÁÖßÁâáÊôÇÁôºÁîüÈåØË™§:", error);
      Alert.alert("ÈåØË™§", `ÈÅ∏ÊìáÁÖßÁâáÊôÇÁôºÁîüÈåØË™§: ${(error as Error).message || "Êú™Áü•ÈåØË™§"}`);
    }
  };

  const handleHEICSelectionComplete = (selectedFiles: any[]) => {
    onFilesSelected(selectedFiles);
    Alert.alert("ÊàêÂäü", `Â∑≤ÈÅ∏Êìá ${selectedFiles.length} ÂÄã HEIC Ê™îÊ°à`);
    setShowHEICModal(false);
  };

  const handleSelectFiles = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({
        type: ["image/heic", "image/heif"],
        multiple: true,
        copyToCacheDirectory: true,
      });

      if (!result.canceled && result.assets) {
        const heicFiles = result.assets.filter(
          file => file.name.toLowerCase().endsWith(".heic") || file.name.toLowerCase().endsWith(".heif") || file.mimeType?.includes("heic") || file.mimeType?.includes("heif")
        );

        if (heicFiles.length === 0) {
          Alert.alert("ÈåØË™§", "Ë´ãÈÅ∏Êìá HEIC/HEIF Ê†ºÂºèÁöÑÂúñÁâáÊ™îÊ°à");
          return;
        }

        onFilesSelected(heicFiles);
        Alert.alert("ÊàêÂäü", `Â∑≤ÈÅ∏Êìá ${heicFiles.length} ÂÄã HEIC Ê™îÊ°à`);
      }
    } catch (error) {
      console.error("ÈÅ∏ÊìáÊ™îÊ°àÊôÇÁôºÁîüÈåØË™§:", error);
      Alert.alert("ÈåØË™§", "ÈÅ∏ÊìáÊ™îÊ°àÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÈáçË©¶");
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  return (
    <View style={styles.container}>
      <View style={styles.selectionOptions}>
        <Animated.View style={[styles.optionWrapper, { transform: [{ scale: scaleAnimPhoto }] }]}>
          <TouchableOpacity
            onPress={disabled ? undefined : () => animatePress(scaleAnimPhoto, handleSelectFromPhotos)}
            disabled={disabled}
            activeOpacity={0.9}
            style={[styles.optionCard, disabled && styles.disabled]}
          >
            <LinearGradient colors={["rgba(255, 255, 255, 0.15)", "rgba(255, 255, 255, 0.05)"]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.optionGradient}>
              <View style={styles.optionContent}>
                <View style={styles.iconWrapper}>
                  <LinearGradient colors={[colors.electric, colors.primary]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.optionIconContainer}>
                    <View style={styles.cameraIcon}>
                      <View style={[styles.cameraBody, { backgroundColor: colors.textInverse }]} />
                      <View style={[styles.cameraLens, { backgroundColor: "transparent", borderColor: colors.textInverse }]} />
                      <View style={[styles.cameraFlash, { backgroundColor: colors.textInverse }]} />
                    </View>
                  </LinearGradient>
                  <View style={[styles.iconGlow, { backgroundColor: colors.electric }]} />
                </View>
                <View style={styles.textContainer}>
                  <ThemedText style={[styles.optionTitle, { color: colors.textPrimary }]}>ÈÅ∏ÊìáÁõ∏Á∞ø</ThemedText>
                  <ThemedText style={[styles.optionSubtitle, { color: colors.textSecondary }]}>ÂæûÁõ∏Á∞øÈÅ∏Êìá HEIC ÁÖßÁâá</ThemedText>
                </View>
              </View>
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>

        <Animated.View style={[styles.optionWrapper, { transform: [{ scale: scaleAnimFile }] }]}>
          <TouchableOpacity
            onPress={disabled ? undefined : () => animatePress(scaleAnimFile, handleSelectFiles)}
            disabled={disabled}
            activeOpacity={0.9}
            style={[styles.optionCard, disabled && styles.disabled]}
          >
            <LinearGradient colors={["rgba(255, 255, 255, 0.15)", "rgba(255, 255, 255, 0.05)"]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.optionGradient}>
              <View style={styles.optionContent}>
                <View style={styles.iconWrapper}>
                  <LinearGradient colors={[colors.neon, colors.secondary]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.optionIconContainer}>
                    <View style={styles.folderIcon}>
                      <View style={[styles.folderBack, { backgroundColor: colors.textInverse }]} />
                      <View style={[styles.folderFront, { backgroundColor: colors.textInverse }]} />
                      <View style={[styles.folderTab, { backgroundColor: colors.textInverse }]} />
                    </View>
                  </LinearGradient>
                  <View style={[styles.iconGlow, { backgroundColor: colors.neon }]} />
                </View>
                <View style={styles.textContainer}>
                  <ThemedText style={[styles.optionTitle, { color: colors.textPrimary }]}>ÈÅ∏ÊìáÊ™îÊ°à</ThemedText>
                  <ThemedText style={[styles.optionSubtitle, { color: colors.textSecondary }]}>ÂæûÊ™îÊ°àÁ≥ªÁµ±ÈÅ∏Êìá</ThemedText>
                </View>
              </View>
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>
      </View>

      {selectedFiles.length > 0 && (
        <Card style={styles.selectedFilesCard} variant="elevated">
          <View style={styles.selectedHeader}>
            <StatusBadge status="success" text={`Â∑≤ÈÅ∏Êìá ${selectedFiles.length} ÂÄãÊ™îÊ°à`} icon="‚úÖ" />
            <Button title="Ê∏ÖÈô§ÂÖ®ÈÉ®" variant="ghost" size="small" onPress={onClearFiles} disabled={disabled} />
          </View>

          <View style={styles.filesList}>
            {selectedFiles.slice(0, 3).map((file, index) => (
              <View key={index} style={styles.fileItem}>
                <View style={styles.fileInfo}>
                  <ThemedText style={[styles.fileName, { color: colors.textPrimary }]} numberOfLines={1}>
                    {file.name}
                  </ThemedText>
                  <ThemedText style={[styles.fileSize, { color: colors.textTertiary }]}>{formatFileSize(file.size || 0)}</ThemedText>
                </View>
                <StatusBadge status="info" text="HEIC" size="small" />
              </View>
            ))}

            {selectedFiles.length > 3 && <ThemedText style={[styles.moreFiles, { color: colors.textSecondary }]}>ÈÇÑÊúâ {selectedFiles.length - 3} ÂÄãÊ™îÊ°à...</ThemedText>}
          </View>
        </Card>
      )}

      <HEICPickerModal visible={showHEICModal} onClose={() => setShowHEICModal(false)} onSelectionComplete={handleHEICSelectionComplete} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    gap: Spacing.lg,
  },

  selectionOptions: {
    flexDirection: "row",
    gap: Spacing.md,
  },

  optionWrapper: {
    flex: 1,
  },

  optionCard: {
    borderRadius: BorderRadius.xl,
    overflow: "hidden",
    ...Shadows.lg,
  },

  optionGradient: {
    padding: Spacing.lg,
    borderRadius: BorderRadius.xl,
    borderWidth: 1,
    borderColor: "rgba(255, 255, 255, 0.2)",
  },

  optionContent: {
    alignItems: "center",
    position: "relative",
  },

  iconWrapper: {
    position: "relative",
    marginBottom: Spacing.md,
  },

  optionIconContainer: {
    width: 64,
    height: 64,
    borderRadius: 32,
    alignItems: "center",
    justifyContent: "center",
    ...Shadows.neon,
  },

  iconGlow: {
    position: "absolute",
    top: -4,
    left: -4,
    right: -4,
    bottom: -4,
    borderRadius: 36,
    opacity: 0.3,
    ...Shadows.glow,
  },

  optionIcon: {
    fontSize: 28,
  },

  // Camera Icon Styles
  cameraIcon: {
    width: 32,
    height: 32,
    justifyContent: "center",
    alignItems: "center",
  },

  cameraBody: {
    width: 24,
    height: 18,
    borderRadius: 4,
    position: "absolute",
  },

  cameraLens: {
    width: 12,
    height: 12,
    borderRadius: 6,
    borderWidth: 2,
    position: "absolute",
  },

  cameraFlash: {
    width: 4,
    height: 4,
    borderRadius: 2,
    position: "absolute",
    top: -4,
    right: 2,
  },

  // Folder Icon Styles
  folderIcon: {
    width: 32,
    height: 32,
    justifyContent: "center",
    alignItems: "center",
  },

  folderBack: {
    width: 26,
    height: 20,
    borderRadius: 3,
    position: "absolute",
    bottom: 4,
  },

  folderFront: {
    width: 24,
    height: 18,
    borderRadius: 3,
    position: "absolute",
    bottom: 2,
    left: 1,
  },

  folderTab: {
    width: 10,
    height: 6,
    borderTopLeftRadius: 3,
    borderTopRightRadius: 3,
    position: "absolute",
    top: 2,
    left: 4,
  },

  textContainer: {
    alignItems: "center",
    marginBottom: Spacing.sm,
  },

  optionTitle: {
    ...Typography.labelLarge,
    textAlign: "center",
    marginBottom: Spacing.xs,
    fontWeight: "700",
  },

  optionSubtitle: {
    ...Typography.caption,
    textAlign: "center",
    opacity: 0.8,
  },

  disabled: {
    opacity: 0.6,
  },

  selectedFilesCard: {
    marginTop: Spacing.md,
  },
  selectedHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: Spacing.lg,
  },
  filesList: {
    gap: Spacing.md,
  },
  fileItem: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: Spacing.sm,
    paddingHorizontal: Spacing.md,
    borderRadius: BorderRadius.sm,
    backgroundColor: "rgba(99, 102, 241, 0.05)",
  },
  fileInfo: {
    flex: 1,
    marginRight: Spacing.md,
  },
  fileName: {
    ...Typography.labelMedium,
    marginBottom: 2,
  },
  fileSize: {
    ...Typography.caption,
  },
  moreFiles: {
    ...Typography.bodySmall,
    textAlign: "center",
    fontStyle: "italic",
    marginTop: Spacing.sm,
  },
});
